generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  email            String           @unique
  password         String
  firstName        String?
  lastName         String?
  role             Role             @default(USER)
  heightCm         Int?
  weightKg         Float?
  bodyFatPct       Float?
  goalWeightKg     Float?
  goalBodyFatPct   Float?
  age              Int?
  gender           Gender?
  profileImage     String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  contactInfo      String?
  specialization   String?
  exercises        Exercise[]
  workouts         Workout[]
  recentExercises  RecentExercise[]
}

model Workout {
  id           Int               @id @default(autoincrement())
  title        String
  description  String?
  imageUrl     String? 
  createdById  Int
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  createdBy    User              @relation(fields: [createdById], references: [id])
  splits       WorkoutSplit[]
}

model WorkoutSplit {
  id          Int                   @id @default(autoincrement())
  workoutId   Int
  name        String
  description String?
  imageUrl    String?
  workout     Workout               @relation(fields: [workoutId], references: [id])
  exercises   Exercise[]
}

model Exercise {
  id               Int              @id @default(autoincrement())
  splitId          Int
  name             String
  description      String?
  videoId          String
  split            WorkoutSplit @relation(fields: [splitId], references: [id])
  createdById      Int
  createdAt        DateTime          @default(now())
  createdBy        User              @relation(fields: [createdById], references: [id])
  recentViews      RecentExercise[]
}

model Meal {
  id          Int                   @id @default(autoincrement())
  name        String
  type        MealType?
  calories    Int
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RecentExercise {
  id         Int      @id @default(autoincrement())
  userId     Int
  exerciseId Int
  viewedAt   DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  
  @@unique([userId, exerciseId]) // Prevent duplicate views, will update timestamp
}

enum Role {
  USER
  TRAINER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}
